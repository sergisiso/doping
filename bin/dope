#!/usr/bin/env python

import os
import sys
import argparse
from shutil import copyfile
from subprocess import call
from codegen.CodeTransformations import InjectDoping

ext = ['.cpp', '.c', '.cc']


def main():

    # Parse input arguments
    parser = argparse.ArgumentParser(
                formatter_class=argparse.RawTextHelpFormatter
                )
    parser.add_argument('-v', '--verbose', help='increase output verbosity',
                        action="store_true")
    parser.add_argument('--dose', type=int, default='1',
                        choices=[0, 1, 2, 3],
                        help='''dose supports the following:
    0   - Don't inject dynamic optimizations unless
          explicitly requested by marking the loops
          with '#pragma doping'.
    1   - (default) Conservatively inject dynamic
          optimizations.
    2   - Aggressively inject dynamic optimizations.
    3   - Inject dynamic optimizations to all loops
          that support them.
                        ''')
    parser.add_argument('--optimization', type=str, default='delay_evaluation',
                        choices=['delay_evaluation', 'compiler_pgo',
                                 'loop_tiling'],
                        help='''optimization supports the following:
    delay_evaluation    - Description. (default)
    compiler_pgo        - Description.
    loop_tiling         - Description.
                        ''')
    parser.add_argument('--save-files',
                        help='Store Doping intermediate files. Useful for'
                        ' debugging.',
                        action="store_true")
    parser.add_argument('compiler_command', nargs="+",
                        help='the command used by the compiler')
    args = parser.parse_args()

    # Initial Environment checks
    if 'DOPING_ROOT' not in os.environ:
        print("Error: Environment variable DOPING_ROOT not defined!")
        sys.exit(-1)

    dopingruntimepath = os.path.join(os.environ['DOPING_ROOT'],
                                     "bin/libdoping.so")

    if not os.path.isfile(dopingruntimepath):
        print("Error: Can't find doping Runtime object file."
              " Is doping properly compiled?")
        sys.exit(-1)

    # Find C/C++ files in the input command
    c_files = [x for x in args.compiler_command if x.endswith(tuple(ext))]
    if len(c_files) != 1:
        print("Error: Can't handle compiler commands without exactly 1 C/C++"
              "file")
        sys.exit(-1)
    originalfile = c_files[0]

    # Link dl and dopingRuntime libraries (order is important!)
    new_compiler_command = args.compiler_command[:]
    new_compiler_command.append("-I" + os.environ['DOPING_ROOT'] + "/bin")
    new_compiler_command.append(dopingruntimepath)
    new_compiler_command.append("-ldl")

    # Get all compiler command with all flags but the -o and the input file
    # (probably will break with more complex examples). These will be re-used
    # during dynamic compilation.
    dynamic_compilation_command = args.compiler_command[:]
    dynamic_compilation_command.remove(originalfile)
    outputflag_position = dynamic_compilation_command.index("-o")
    dynamic_compilation_command.pop(outputflag_position + 1)
    dynamic_compilation_command.pop(outputflag_position)
    dynamic_compilation_string = ' '.join(dynamic_compilation_command)

    # Source to Source transformation of C/C++ files
    # FIXME: It should only do the copy and renaming if there is an opportunity
    # for dynamic optimization.
    index = args.compiler_command.index(originalfile)
    filename, file_extension = os.path.splitext(originalfile)
    newfile = filename + ".doping" + file_extension
    copyfile(originalfile, newfile)
    print("Generating doping framework file: " + newfile)
    transformation = InjectDoping.InjectDoping(
        originalfile, newfile, dynamic_compilation_string)
    transformation.apply()
    new_compiler_command[index] = newfile

    # Compile the generated code
    print("Compiling with doping runtime and " + originalfile +
          " -> " + newfile)
    print(' '.join(new_compiler_command))
    ret = call(list(new_compiler_command), shell=False)
    sys.exit(ret)


if __name__ == "__main__":
    main()
