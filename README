Jake
========

Project Description
-------------------------------

Jake is a transparent and fully automatic framework that does source-to-source transformation and  
runtime compilation for enhancing the vectorisation of scientific applications. The framework 
masquerades the overall compilation and execution through a number of aspects. First it performs 
limited source-to-source, compile-time transformation to inject the code that facilitates dynamic 
evaluation of loops. During the dynamic evaluation, the framework delays the execution as much as 
possible to  leverage potential runtime-only information, which are otherwise, unavailable to the 
compilers during static analysis. Once the framework believes that enough information has been 
collected to facilitate the vectorisation, it recompiles the ideal candidates (for the time being, 
these are loops) and links that to the currently running code. 


Although it is possible to know more at runtime, a number of challenges do exist. First, delayed 
evaluation may not always pay off. After all, we may not find any candidates that massively benefits 
from vectorisation. Secondly, it is always a question, how much delaying is good. The aim of this 
framework is to facilitate the research into runtime vectorisation. 




Usage
--------------------------------
Simple compiler instruction:
./jake [jake_options] -- compiler_command

Ex:
./jake -- icc test/flops/flops_serial.c -o test/flops/flops


Makefile build system:
CC="./jake [jake_options] -- icc" make
Ex:

Contributors
-------------------------------
Sergi Siso <sergi.siso@stfc.ac.uk>
Jeyan Thiyagalingam <T.Jeyarajan@liverpool.ac.uk>